package it.pagopa.io.wallet.cbor

import com.upokecenter.cbor.CBORObject
import it.pagopa.io.wallet.cbor.helper.toModelMDoc
import it.pagopa.io.wallet.cbor.parser.CBorParser
import org.json.JSONObject
import org.junit.Test
import java.util.Base64
import kotlin.io.encoding.ExperimentalEncodingApi

class CborParserTest {
    private val mockEuPidRequest by lazy {
        "omdkb2NUeXBld2V1LmV1cm9wYS5lYy5ldWRpLnBpZC4xam5hbWVTcGFjZXOhd2V1LmV1cm9wYS5lYy5ldWRpLnBpZC4xuCRrZmFtaWx5X25hbWX0amdpdmVuX25hbWX0amJpcnRoX2RhdGX0a2FnZV9vdmVyXzE49GthZ2Vfb3Zlcl8xM/RrYWdlX292ZXJfMTb0a2FnZV9vdmVyXzIx9GthZ2Vfb3Zlcl82MPRrYWdlX292ZXJfNjX0a2FnZV9vdmVyXzY49GxhZ2VfaW5feWVhcnP0bmFnZV9iaXJ0aF95ZWFy9HFmYW1pbHlfbmFtZV9iaXJ0aPRwZ2l2ZW5fbmFtZV9iaXJ0aPRrYmlydGhfcGxhY2X0bWJpcnRoX2NvdW50cnn0a2JpcnRoX3N0YXRl9GpiaXJ0aF9jaXR59HByZXNpZGVudF9hZGRyZXNz9HByZXNpZGVudF9jb3VudHJ59G5yZXNpZGVudF9zdGF0ZfRtcmVzaWRlbnRfY2l0efR0cmVzaWRlbnRfcG9zdGFsX2NvZGX0b3Jlc2lkZW50X3N0cmVldPR1cmVzaWRlbnRfaG91c2VfbnVtYmVy9GZnZW5kZXL0a25hdGlvbmFsaXR59G1pc3N1YW5jZV9kYXRl9GtleHBpcnlfZGF0ZfRxaXNzdWluZ19hdXRob3JpdHn0b2RvY3VtZW50X251bWJlcvR1YWRtaW5pc3RyYXRpdmVfbnVtYmVy9G9pc3N1aW5nX2NvdW50cnn0dGlzc3VpbmdfanVyaXNkaWN0aW9u9Ghwb3J0cmFpdPR1cG9ydHJhaXRfY2FwdHVyZV9kYXRl9A=="
    }
    private val mockMdlRequest by lazy {
        "omdkb2NUeXBldW9yZy5pc28uMTgwMTMuNS4xLm1ETGpuYW1lU3BhY2VzoXFvcmcuaXNvLjE4MDEzLjUuMbgga2ZhbWlseV9uYW1l9GpnaXZlbl9uYW1l9GpiaXJ0aF9kYXRl9Gppc3N1ZV9kYXRl9GtleHBpcnlfZGF0ZfRvaXNzdWluZ19jb3VudHJ59HFpc3N1aW5nX2F1dGhvcml0efRvZG9jdW1lbnRfbnVtYmVy9Ghwb3J0cmFpdPRyZHJpdmluZ19wcml2aWxlZ2Vz9HZ1bl9kaXN0aW5ndWlzaGluZ19zaWdu9HVhZG1pbmlzdHJhdGl2ZV9udW1iZXL0ZmhlaWdodPRmd2VpZ2h09GpleWVfY29sb3Vy9GtoYWlyX2NvbG91cvRrYmlydGhfcGxhY2X0cHJlc2lkZW50X2FkZHJlc3P0dXBvcnRyYWl0X2NhcHR1cmVfZGF0ZfRsYWdlX2luX3llYXJz9G5hZ2VfYmlydGhfeWVhcvRrYWdlX292ZXJfMTj0a2FnZV9vdmVyXzIx9HRpc3N1aW5nX2p1cmlzZGljdGlvbvRrbmF0aW9uYWxpdHn0bXJlc2lkZW50X2NpdHn0bnJlc2lkZW50X3N0YXRl9HRyZXNpZGVudF9wb3N0YWxfY29kZfRwcmVzaWRlbnRfY291bnRyefR4HmZhbWlseV9uYW1lX25hdGlvbmFsX2NoYXJhY3RlcvR4HWdpdmVuX25hbWVfbmF0aW9uYWxfY2hhcmFjdGVy9HRzaWduYXR1cmVfdXN1YWxfbWFya/Q="
    }

    private val mockTest by lazy {
        "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"
    }

    private val mockPagoPA by lazy {
        "omdkb2NUeXBldW9yZy5pc28uMTgwMTMuNS4xLm1ETGxpc3N1ZXJTaWduZWSiamlzc3VlckF1dGiEQ6EBJqEYIVkGGi0tLS0tQkVHSU4gQ0VSVElGSUNBVEUtLS0tLQpNSUlDV3pDQ0FnQ2dBd0lCQWdJR0FaQmJSUGxRTUFvR0NDcUdTTTQ5QkFNQ01IUXhFREFPQmdOVkJBTU1CMUp2YjNRZ1EwRXhEVEFMQmdOVkJBb01CRWxRV2xNeEN6QUpCZ05WQkFZVEFrbFVNUTR3REFZRFZRUUlEQVZNWVhwcGJ6RU5NQXNHQTFVRUJ3d0VVbTl0WlRFbE1DTUdDU3FHU0liM0RRRUpBUllXYVhCNmMzTjJhV3gxY0hCdlFHZHRZV2xzTG1OdmJUQWVGdzB5TkRBMk1qY3hPVFUyTURWYUZ3MHlOVEEyTWpjeE9UVTJNRFZhTUlHTE1SNHdIQVlEVlFRRERCVkZWVVJKSUZkaGJHeGxkQ0JKVkNCSmMzTjFaWEl4RkRBU0JnTlZCQW9NQzBWVlJFa2dWMkZzYkdWME1RNHdEQVlEVlFRR0V3VkpkR0ZzZVRFTk1Bc0dBMVVFQ0F3RVVtOXRaVEVOTUFzR0ExVUVCd3dFVW05dFpURWxNQ01HQ1NxR1NJYjNEUUVKQVJZV2FYQjZjM04yYVd4MWNIQnZRR2R0WVdsc0xtTnZiVEJaTUJNR0J5cUdTTTQ5QWdFR0NDcUdTTTQ5QXdFSEEwSUFCS3NYMHpSV3NVQVdVS3VkTXFzK2x2dU5LTzJxSUxaVUdxalFaMEhXaTEya1dUMWVNeDc1ZW1kMlFiSnQ2QzZ5cWpOR3hVTlk3c1B6VW9aazhCVlNlbWlqWmpCa01Db0dBMVVkSHdRak1DRXdINkFkb0J1R0dXaDBkSEE2THk5c2IyTmhiR2h2YzNRNk9EQTRNQzlqY213d05nWUlLd1lCQlFVSEFRRUVLakFvTUNZR0NDc0dBUVVGQnpBQmhocG9kSFJ3T2k4dmJHOWpZV3hvYjNOME9qZ3dPREF2YjJOemNEQUtCZ2dxaGtqT1BRUURBZ05KQURCR0FpRUExa05YNW5ZVDk3dXNGaGFnMnh4cVNOM2xobk41RzdCR1JhWlYyV3dhMUNzQ0lRQzJPMHJNTktBQUZnb1hDZ2lvT1lRSmJkUkJpTXhmaGxtemdKK0xxTjI4TEE9PQotLS0tLUVORCBDRVJUSUZJQ0FURS0tLS0tCi0tLS0tQkVHSU4gQ0VSVElGSUNBVEUtLS0tLQpNSUlCMmpDQ0FZQ2dBd0lCQWdJR0FaQmJRaDZyTUFvR0NDcUdTTTQ5QkFNQ01IUXhFREFPQmdOVkJBTU1CMUp2YjNRZ1EwRXhEVEFMQmdOVkJBb01CRWxRV2xNeEN6QUpCZ05WQkFZVEFrbFVNUTR3REFZRFZRUUlEQVZNWVhwcGJ6RU5NQXNHQTFVRUJ3d0VVbTl0WlRFbE1DTUdDU3FHU0liM0RRRUpBUllXYVhCNmMzTjJhV3gxY0hCdlFHZHRZV2xzTG1OdmJUQWVGdzB5TkRBMk1qY3hPVFV5TlRoYUZ3MHpOREEyTWpVeE9UVXlOVGhhTUhReEVEQU9CZ05WQkFNTUIxSnZiM1FnUTBFeERUQUxCZ05WQkFvTUJFbFFXbE14Q3pBSkJnTlZCQVlUQWtsVU1RNHdEQVlEVlFRSURBVk1ZWHBwYnpFTk1Bc0dBMVVFQnd3RVVtOXRaVEVsTUNNR0NTcUdTSWIzRFFFSkFSWVdhWEI2YzNOMmFXeDFjSEJ2UUdkdFlXbHNMbU52YlRCWk1CTUdCeXFHU000OUFnRUdDQ3FHU000OUF3RUhBMElBQkg1UlQrUXhsMnVJZGQrejE4eU1qOS9OOUZ3aGdFbHlMcytGWlh0TTROSkVqNjFtRlkySVVqeG1vOUU2TDJoT01kV3VFZ09rSUpXNnk5N1R1Z0tjU1p3d0NnWUlLb1pJemowRUF3SURTQUF3UlFJaEFQOXhhaWtmbElTYWdMSC9yRDExNHRONUZiNmNkRmxvQ2FpMERDMFl1aXBaQWlBb0NWQ1pYZ3I4eFZQdEs3aTZCRmJSTU4zUG5COE5XcjJRbS91WFBDclZCQT09Ci0tLS0tRU5EIENFUlRJRklDQVRFLS0tLS0KWQNh2BimZ2RvY1R5cGV1b3JnLmlzby4xODAxMy41LjEubURMZ3ZlcnNpb25jMS4wbHZhbGlkaXR5SW5mb6Nmc2lnbmVk2QPsdDIwMjUtMDItMTRUMTg6NTA6MzNaaXZhbGlkRnJvbdkD7HQyMDI1LTAyLTE0VDE4OjUwOjMzWmp2YWxpZFVudGls2QPsdDIwMjYtMDItMTRUMTg6NTA6MzNab2RpZ2VzdEFsZ29yaXRobWdTSEEtMjU2bHZhbHVlRGlnZXN0c6Jxb3JnLmlzby4xODAxMy41LjGsAVggfNlM+NvEM1iDZ70FdavlUiQLjbCwrRQ3yf2+ikBvafMCWCB/Rgnjglczyxxb2FGiCmdl+4KLbORtvSdRD7WZgpMcWQNYIMqzQ/duVkqck+MJR5fBQ0UbJVUnwRWCZbgVm0AcPW2RBFggVCfqqslDxGvg7mnaidy4YK5gbDYXcC2ldy3R2jDLK3AFWCD+NijqYnGsEJCGEopQ+avdVKCPMzvYoaAcRQbJRklUrgZYINby9ezEOLDjWb8tyOaMeS4lt+yXpiRWA4SgzhtO+45UB1ggSlKlUbSpFbcqtnvfjW4nh2W2fD5rAQy0g2T824wrRKEIWCDa5cD882iuXcy5byM3MamsW0bFKo/b1VfgWUk89NxvNglYIMKhpu8IshBRhhKZ2bUw2E0T1SapW4+mLK/D+7uCu3+DClggMz4A0oAZ0rtIAzOPsHVP7pI8WODaSjgBRCLnFijVUw8LWCAhOCgyCJ3ZStElQaLjlQ/oEpPSKLwlyxJ+k7yegREDsQxYIL6att57WG5iTLp8+gIkAAcAx2VfPEQ+oKMo9yTlKTr3dG9yZy5pc28uMTgwMTMuNS4xLml0owFYIIDEeTlbC89NJBBtFnsYS3nX8xxwpk8GXsXdPMc0oF6uAlgg45avRm4yvcUDsHih2m5b/PrHllRU7aVw4GyxAQKvB18DWCCU+3subV8Ffp+c4cR8muJYLDPI79H5flFaBEvOh2Vkc21kZXZpY2VLZXlJbmZvoWlkZXZpY2VLZXmkAQIgASFYIQDzQ/RzIhf5rX3Khq+CmHHYpIWattJES2piCDOX02FPcyJYIQC87A5waqkv9I2iW08Jzw5Uvq5outLbFcdmrWHLR/kCF1hAd4Sl6K57sfbrVOsbrzM2+5AQvk651pP2BRNeN929S+myiaanHZOg9O3Zyfd88tDHIKB5L0UeUxDZT7gh3p8RW2puYW1lU3BhY2VzonFvcmcuaXNvLjE4MDEzLjUuMYzYGFh+pGhkaWdlc3RJRAFxZWxlbWVudElkZW50aWZpZXJxaXNzdWluZ19hdXRob3JpdHlmcmFuZG9tUMIECMnXdF0EomUWW5Tdo51sZWxlbWVudFZhbHVleChJc3RpdHV0byBQb2xpZ3JhZmljbyBlIFplY2NhIGRlbGxvIFN0YXRv2BhYVKRoZGlnZXN0SUQCcWVsZW1lbnRJZGVudGlmaWVya2ZhbWlseV9uYW1lZnJhbmRvbVDKEDf5faRFUGtoiYglEAY0bGVsZW1lbnRWYWx1ZWVSb3NzadgYWFukaGRpZ2VzdElEA3FlbGVtZW50SWRlbnRpZmllcmpiaXJ0aF9kYXRlZnJhbmRvbVAOE8UAhSE3G7rt6ikkH5nLbGVsZW1lbnRWYWx1ZdkD7GoxOTgwLTEwLTAx2BhYoqRoZGlnZXN0SUQEcWVsZW1lbnRJZGVudGlmaWVycmRyaXZpbmdfcHJpdmlsZWdlc2ZyYW5kb21QDdRti38mso+XufYspDvCK2xlbGVtZW50VmFsdWWBo3V2ZWhpY2xlX2NhdGVnb3J5X2NvZGVhQWppc3N1ZV9kYXRl2QPsajIwMjMtMTEtMT"
    }

    private val mockNew by lazy {
        ""
    }

    @OptIn(ExperimentalEncodingApi::class)
    @Test
    fun `test is json`() {
        val rawCbor = kotlin.io.encoding.Base64.decode(moreDocsSource)
        val json = CBorParser(rawCbor).toJson()
        println(json)
        assert(json != null)
    }

    @OptIn(ExperimentalEncodingApi::class)
    @Test
    fun `test is mdl Request`() {
        val json = CBorParser(kotlin.io.encoding.Base64.decode(mockMdlRequest)).toJson()
        println(json)
        assert(json != null)
    }

    @OptIn(ExperimentalEncodingApi::class)
    @Test
    fun `test is EU PID Request`() {
        val json = CBorParser(kotlin.io.encoding.Base64.decode(mockEuPidRequest)).toJson()
        println(json)
        assert(json != null)
    }

    @OptIn(ExperimentalEncodingApi::class)
    @Test
    fun `test one document json`() {
        val rawCbor = kotlin.io.encoding.Base64.decode(mockTest)
        CBorParser(rawCbor).documentsCborToJson(true, { json ->
            println("JSON")
            println(json)
            assert(json != null)
        }) {

        }
    }

    @OptIn(ExperimentalEncodingApi::class)
    @Test
    fun `test documents json`() {
        val rawCbor = kotlin.io.encoding.Base64.decode(moreDocsSource)
        CBorParser(rawCbor).documentsCborToJson(false, { json ->
            println(json)
            assert(json != null)
        })
    }

    @OptIn(ExperimentalEncodingApi::class)
    @Test
    fun `test documents json issuer auth`() {
        val rawCbor = kotlin.io.encoding.Base64.decode(moreDocsIssuerAuth)
        CBorParser(rawCbor).documentsCborToJson(false, { json ->
            assert(json != null)
            val myJson = JSONObject(json!!)
            myJson.optJSONArray("documents")?.let {
                for (i in 0 until it.length()) {
                    it.getJSONObject(i).optJSONObject("issuerSigned")?.let { issuerSigned ->
                        issuerSigned.optString("issuerAuth").let { issuerAuth ->
                            val ba = Base64.getUrlDecoder().decode(issuerAuth)
                            println("###############################")
                            println("ISSUER_AUTH PARSED:")
                            val parsed = CBorParser(ba).toJson()
                            println(parsed)
                            println("###############################")
                        }
                    }
                }
            }

            println(json)
        })
    }

    @Test
    fun `test not good cbor`() {
        val rawCbor = "a".toByteArray()
        val json = CBorParser(rawCbor).toJson()
        println(json)
        assert(json == null)
    }

    @Test
    fun `test not good cbor documents json`() {
        val rawCbor = "a".toByteArray()
        CBorParser(rawCbor).documentsCborToJson(false, { json ->
            assert(json == null)
        })
    }

    @OptIn(ExperimentalEncodingApi::class)
    @Test
    fun `test documents json element identifier separated`() {
        val rawCbor = kotlin.io.encoding.Base64.decode(moreDocsIssuerAuth)
        CBorParser(rawCbor).documentsCborToJson(true, { json ->
            assert(json != null)
            println(json)
        })
    }

    @OptIn(ExperimentalEncodingApi::class)
    @Test
    fun `test documents json element identifier not separated`() {
        val rawCbor = kotlin.io.encoding.Base64.decode(moreDocsIssuerAuth)
        CBorParser(rawCbor).documentsCborToJson(false, { json ->
            assert(json != null)
            println(json)
        })
    }

    @Test
    fun testACaso() {
        val rawCbor = android.util.Base64.decode(mockPagoPA, android.util.Base64.NO_WRAP)
        print(CBORObject.DecodeFromBytes(rawCbor).toModelMDoc().toJson(true))
    }
}