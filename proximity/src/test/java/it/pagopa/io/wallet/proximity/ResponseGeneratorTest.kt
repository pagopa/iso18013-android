package it.pagopa.io.wallet.proximity

import it.pagopa.io.wallet.cbor.model.DocType
import it.pagopa.io.wallet.cbor.model.Document
import it.pagopa.io.wallet.cbor.model.IssuerSigned
import it.pagopa.io.wallet.cbor.parser.CBorParser
import it.pagopa.io.wallet.proximity.request.DocRequested
import it.pagopa.io.wallet.proximity.response.ResponseGenerator
import it.pagopa.io.wallet.proximity.response.ResponseGenerator.Response
import org.json.JSONObject
import org.junit.Test
import kotlin.io.encoding.Base64
import kotlin.io.encoding.ExperimentalEncodingApi

class ResponseGeneratorTest {
    private val mockNew by lazy {
        ""
    }
    private val mockSessionsTranscript = ByteArray(10)
    private val mockFieldRequestedAndAccepted by lazy {
        JSONObject(
            """{"request":{"org.iso.18013.5.1.mDL":{"org.iso.18013.5.1":{"height":true,"weight":true,"portrait":true,"birth_date":true,"eye_colour":true,"given_name":true,"issue_date":true,"age_over_18":true,"age_over_21":true,"birth_place":true,"expiry_date":true,"family_name":true,"hair_colour":true,"nationality":true,"age_in_years":true,"resident_city":true,"age_birth_year":true,"resident_state":true,"document_number":true,"issuing_country":true,"resident_address":true,"resident_country":true,"issuing_authority":true,"driving_privileges":true,"issuing_jurisdiction":true,"resident_postal_code":true,"signature_usual_mark":true,"administrative_number":true,"portrait_capture_date":true,"un_distinguishing_sign":true,"given_name_national_character":true,"family_name_national_character":true}},"eu.europa.ec.eudi.pid.1":{"eu.europa.ec.eudi.pid.1":{"gender":true,"portrait":true,"birth_city":true,"birth_date":true,"given_name":true,"age_over_13":true,"age_over_16":true,"age_over_18":true,"age_over_21":true,"age_over_60":true,"age_over_65":true,"age_over_68":true,"birth_place":true,"birth_state":true,"expiry_date":true,"family_name":true,"nationality":true,"age_in_years":true,"birth_country":true,"issuance_date":true,"resident_city":true,"age_birth_year":true,"resident_state":true,"document_number":true,"issuing_country":true,"resident_street":true,"given_name_birth":true,"resident_address":true,"resident_country":true,"family_name_birth":true,"issuing_authority":true,"issuing_jurisdiction":true,"resident_postal_code":true,"administrative_number":true,"portrait_capture_date":true,"resident_house_number":true}},"org.iso.18013.5.1.reservation":{"org.iso.18013.5.reservation.1":{"guests":true,"location":true,"birth_date":true,"car_rental":true,"given_name":true,"expiry_date":true,"family_name":true,"num_of_rooms":true,"check_in_date":true,"issuance_date":true,"check_out_date":true,"reservation_id":true,"issuing_country":true,"reservation_date":true,"issuing_authority":true,"booking_service_name":true,"service_provider_name":true}},"org.iso.23220.2.photoid.1":{"org.iso.23220.photoid.1":{"gender":true,"portrait":true,"person_id":true,"birth_city":true,"birth_date":true,"given_name":true,"age_over_18":true,"birth_place":true,"birth_state":true,"expiry_date":true,"family_name":true,"nationality":true,"age_in_years":true,"birth_country":true,"issuance_date":true,"resident_city":true,"age_birth_year":true,"resident_state":true,"document_number":true,"issuing_country":true,"resident_street":true,"given_name_birth":true,"resident_address":true,"resident_country":true,"family_name_birth":true,"issuing_authority":true,"issuing_jurisdiction":true,"resident_postal_code":true,"administrative_number":true,"portrait_capture_date":true,"resident_house_number":true,"travel_document_number":true}}}}}"""
        )
    }

    @Test
    fun createOpenIdV4SessionTranscript() {
        val sessionTranscript = OpenID4VP(
            "clientId",
            "responseUri",
            "authorizationRequestNonce",
            "mdocGeneratedNonce"
        ).createSessionTranscript()
        val parser = CBorParser(sessionTranscript).toJson()
        println(parser)
    }

    @OptIn(ExperimentalEncodingApi::class)
    @Test
    fun createResponseTest() {
        ResponseGenerator(mockSessionsTranscript)
            .createResponse(
                arrayOf(DocRequested(mockNew, "alias", DocType.MDL.value)),
                mockFieldRequestedAndAccepted.toString(),
                object : Response {
                    override fun onResponseGenerated(response: ByteArray) {
                        println(Base64.encode(response))
                    }

                    override fun onError(message: String) {
                        println("ERROR: $message")
                    }
                })
    }

    @OptIn(ExperimentalEncodingApi::class)
    @Test
    fun `create data elements test`() {
        val disclosedDocument = Document.fromByteArray(Base64.decode(mockNew))
        val docToJson = disclosedDocument.toJson(true)
        println(docToJson)
        val doc = DocRequested(
            Base64.encode(disclosedDocument.issuerSigned!!.rawValue!!),
            "alias",
            disclosedDocument.docType!!
        )
        val bytes = Base64.decode(doc.issuerSignedContent)
        val issuerSigned = IssuerSigned.issuerSignedFromByteArray(bytes)
        val dataElements = ResponseGenerator(mockSessionsTranscript)
            .createDataElements(
                issuerSigned!!,
                mockFieldRequestedAndAccepted.getJSONObject("request")
            )
        val jsonNameSpaces = docToJson
            .getJSONObject("issuerSigned")
            .getJSONObject("nameSpaces")
        println("NAME_SPACES:")
        println(jsonNameSpaces)
        val array = jsonNameSpaces.get("org.iso.18013.5.1") as ArrayList<*>
        array.forEach {
            val elIdentifier = (it as JSONObject).getString("elementIdentifier")
            assert(dataElements.any {
                it.dataElementName == elIdentifier
            })
        }
    }
}